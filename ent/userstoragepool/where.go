// Code generated by ent, DO NOT EDIT.

package userstoragepool

import (
	"file_flow/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldID, id))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldDeleteAt, v))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldUID, v))
}

// RepoID applies equality check predicate on the "repo_id" field. It's identical to RepoIDEQ.
func RepoID(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldRepoID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldParentID, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldFilename, v))
}

// Ext applies equality check predicate on the "ext" field. It's identical to ExtEQ.
func Ext(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldExt, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldCreateAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotNull(FieldDeleteAt))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldUID, v))
}

// RepoIDEQ applies the EQ predicate on the "repo_id" field.
func RepoIDEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldRepoID, v))
}

// RepoIDNEQ applies the NEQ predicate on the "repo_id" field.
func RepoIDNEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldRepoID, v))
}

// RepoIDIn applies the In predicate on the "repo_id" field.
func RepoIDIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldRepoID, vs...))
}

// RepoIDNotIn applies the NotIn predicate on the "repo_id" field.
func RepoIDNotIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldRepoID, vs...))
}

// RepoIDGT applies the GT predicate on the "repo_id" field.
func RepoIDGT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldRepoID, v))
}

// RepoIDGTE applies the GTE predicate on the "repo_id" field.
func RepoIDGTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldRepoID, v))
}

// RepoIDLT applies the LT predicate on the "repo_id" field.
func RepoIDLT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldRepoID, v))
}

// RepoIDLTE applies the LTE predicate on the "repo_id" field.
func RepoIDLTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldRepoID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldParentID, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldContainsFold(FieldFilename, v))
}

// ExtEQ applies the EQ predicate on the "ext" field.
func ExtEQ(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldExt, v))
}

// ExtNEQ applies the NEQ predicate on the "ext" field.
func ExtNEQ(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldExt, v))
}

// ExtIn applies the In predicate on the "ext" field.
func ExtIn(vs ...string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldExt, vs...))
}

// ExtNotIn applies the NotIn predicate on the "ext" field.
func ExtNotIn(vs ...string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldExt, vs...))
}

// ExtGT applies the GT predicate on the "ext" field.
func ExtGT(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldExt, v))
}

// ExtGTE applies the GTE predicate on the "ext" field.
func ExtGTE(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldExt, v))
}

// ExtLT applies the LT predicate on the "ext" field.
func ExtLT(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldExt, v))
}

// ExtLTE applies the LTE predicate on the "ext" field.
func ExtLTE(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldExt, v))
}

// ExtContains applies the Contains predicate on the "ext" field.
func ExtContains(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldContains(FieldExt, v))
}

// ExtHasPrefix applies the HasPrefix predicate on the "ext" field.
func ExtHasPrefix(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldHasPrefix(FieldExt, v))
}

// ExtHasSuffix applies the HasSuffix predicate on the "ext" field.
func ExtHasSuffix(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldHasSuffix(FieldExt, v))
}

// ExtEqualFold applies the EqualFold predicate on the "ext" field.
func ExtEqualFold(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEqualFold(FieldExt, v))
}

// ExtContainsFold applies the ContainsFold predicate on the "ext" field.
func ExtContainsFold(v string) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldContainsFold(FieldExt, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UserStoragePool {
	return predicate.UserStoragePool(sql.FieldLTE(FieldCreateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserStoragePool) predicate.UserStoragePool {
	return predicate.UserStoragePool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserStoragePool) predicate.UserStoragePool {
	return predicate.UserStoragePool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserStoragePool) predicate.UserStoragePool {
	return predicate.UserStoragePool(func(s *sql.Selector) {
		p(s.Not())
	})
}
