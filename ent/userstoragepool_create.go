// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"file_flow/ent/userstoragepool"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserStoragePoolCreate is the builder for creating a UserStoragePool entity.
type UserStoragePoolCreate struct {
	config
	mutation *UserStoragePoolMutation
	hooks    []Hook
}

// SetDeleteAt sets the "delete_at" field.
func (uspc *UserStoragePoolCreate) SetDeleteAt(t time.Time) *UserStoragePoolCreate {
	uspc.mutation.SetDeleteAt(t)
	return uspc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uspc *UserStoragePoolCreate) SetNillableDeleteAt(t *time.Time) *UserStoragePoolCreate {
	if t != nil {
		uspc.SetDeleteAt(*t)
	}
	return uspc
}

// SetUID sets the "uid" field.
func (uspc *UserStoragePoolCreate) SetUID(i int) *UserStoragePoolCreate {
	uspc.mutation.SetUID(i)
	return uspc
}

// SetRepoID sets the "repo_id" field.
func (uspc *UserStoragePoolCreate) SetRepoID(i int) *UserStoragePoolCreate {
	uspc.mutation.SetRepoID(i)
	return uspc
}

// SetParentID sets the "parent_id" field.
func (uspc *UserStoragePoolCreate) SetParentID(i int) *UserStoragePoolCreate {
	uspc.mutation.SetParentID(i)
	return uspc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uspc *UserStoragePoolCreate) SetNillableParentID(i *int) *UserStoragePoolCreate {
	if i != nil {
		uspc.SetParentID(*i)
	}
	return uspc
}

// SetFilename sets the "filename" field.
func (uspc *UserStoragePoolCreate) SetFilename(s string) *UserStoragePoolCreate {
	uspc.mutation.SetFilename(s)
	return uspc
}

// SetExt sets the "ext" field.
func (uspc *UserStoragePoolCreate) SetExt(s string) *UserStoragePoolCreate {
	uspc.mutation.SetExt(s)
	return uspc
}

// SetCreateAt sets the "create_at" field.
func (uspc *UserStoragePoolCreate) SetCreateAt(t time.Time) *UserStoragePoolCreate {
	uspc.mutation.SetCreateAt(t)
	return uspc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uspc *UserStoragePoolCreate) SetNillableCreateAt(t *time.Time) *UserStoragePoolCreate {
	if t != nil {
		uspc.SetCreateAt(*t)
	}
	return uspc
}

// Mutation returns the UserStoragePoolMutation object of the builder.
func (uspc *UserStoragePoolCreate) Mutation() *UserStoragePoolMutation {
	return uspc.mutation
}

// Save creates the UserStoragePool in the database.
func (uspc *UserStoragePoolCreate) Save(ctx context.Context) (*UserStoragePool, error) {
	if err := uspc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*UserStoragePool, UserStoragePoolMutation](ctx, uspc.sqlSave, uspc.mutation, uspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uspc *UserStoragePoolCreate) SaveX(ctx context.Context) *UserStoragePool {
	v, err := uspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uspc *UserStoragePoolCreate) Exec(ctx context.Context) error {
	_, err := uspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uspc *UserStoragePoolCreate) ExecX(ctx context.Context) {
	if err := uspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uspc *UserStoragePoolCreate) defaults() error {
	if _, ok := uspc.mutation.ParentID(); !ok {
		v := userstoragepool.DefaultParentID
		uspc.mutation.SetParentID(v)
	}
	if _, ok := uspc.mutation.CreateAt(); !ok {
		v := userstoragepool.DefaultCreateAt
		uspc.mutation.SetCreateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uspc *UserStoragePoolCreate) check() error {
	if _, ok := uspc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "UserStoragePool.uid"`)}
	}
	if _, ok := uspc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo_id", err: errors.New(`ent: missing required field "UserStoragePool.repo_id"`)}
	}
	if _, ok := uspc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "UserStoragePool.parent_id"`)}
	}
	if _, ok := uspc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "UserStoragePool.filename"`)}
	}
	if v, ok := uspc.mutation.Filename(); ok {
		if err := userstoragepool.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.filename": %w`, err)}
		}
	}
	if _, ok := uspc.mutation.Ext(); !ok {
		return &ValidationError{Name: "ext", err: errors.New(`ent: missing required field "UserStoragePool.ext"`)}
	}
	if v, ok := uspc.mutation.Ext(); ok {
		if err := userstoragepool.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.ext": %w`, err)}
		}
	}
	if _, ok := uspc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "UserStoragePool.create_at"`)}
	}
	return nil
}

func (uspc *UserStoragePoolCreate) sqlSave(ctx context.Context) (*UserStoragePool, error) {
	if err := uspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uspc.mutation.id = &_node.ID
	uspc.mutation.done = true
	return _node, nil
}

func (uspc *UserStoragePoolCreate) createSpec() (*UserStoragePool, *sqlgraph.CreateSpec) {
	var (
		_node = &UserStoragePool{config: uspc.config}
		_spec = sqlgraph.NewCreateSpec(userstoragepool.Table, sqlgraph.NewFieldSpec(userstoragepool.FieldID, field.TypeInt))
	)
	if value, ok := uspc.mutation.DeleteAt(); ok {
		_spec.SetField(userstoragepool.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = &value
	}
	if value, ok := uspc.mutation.UID(); ok {
		_spec.SetField(userstoragepool.FieldUID, field.TypeInt, value)
		_node.UID = value
	}
	if value, ok := uspc.mutation.RepoID(); ok {
		_spec.SetField(userstoragepool.FieldRepoID, field.TypeInt, value)
		_node.RepoID = value
	}
	if value, ok := uspc.mutation.ParentID(); ok {
		_spec.SetField(userstoragepool.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := uspc.mutation.Filename(); ok {
		_spec.SetField(userstoragepool.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := uspc.mutation.Ext(); ok {
		_spec.SetField(userstoragepool.FieldExt, field.TypeString, value)
		_node.Ext = value
	}
	if value, ok := uspc.mutation.CreateAt(); ok {
		_spec.SetField(userstoragepool.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	return _node, _spec
}

// UserStoragePoolCreateBulk is the builder for creating many UserStoragePool entities in bulk.
type UserStoragePoolCreateBulk struct {
	config
	builders []*UserStoragePoolCreate
}

// Save creates the UserStoragePool entities in the database.
func (uspcb *UserStoragePoolCreateBulk) Save(ctx context.Context) ([]*UserStoragePool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uspcb.builders))
	nodes := make([]*UserStoragePool, len(uspcb.builders))
	mutators := make([]Mutator, len(uspcb.builders))
	for i := range uspcb.builders {
		func(i int, root context.Context) {
			builder := uspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserStoragePoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uspcb *UserStoragePoolCreateBulk) SaveX(ctx context.Context) []*UserStoragePool {
	v, err := uspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uspcb *UserStoragePoolCreateBulk) Exec(ctx context.Context) error {
	_, err := uspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uspcb *UserStoragePoolCreateBulk) ExecX(ctx context.Context) {
	if err := uspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
