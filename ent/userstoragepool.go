// Code generated by ent, DO NOT EDIT.

package ent

import (
	"file_flow/ent/userstoragepool"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserStoragePool is the model entity for the UserStoragePool schema.
type UserStoragePool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt *time.Time `json:"delete_at,omitempty"`
	// 用户id
	UID int `json:"uid,omitempty"`
	// 中心存储id
	RepoID int `json:"repo_id,omitempty"`
	// 父目录id, 0表示根目录
	ParentID int `json:"parent_id,omitempty"`
	// 文件名
	Filename string `json:"filename,omitempty"`
	// 文件扩展名
	Ext string `json:"ext,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserStoragePool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstoragepool.FieldID, userstoragepool.FieldUID, userstoragepool.FieldRepoID, userstoragepool.FieldParentID:
			values[i] = new(sql.NullInt64)
		case userstoragepool.FieldFilename, userstoragepool.FieldExt:
			values[i] = new(sql.NullString)
		case userstoragepool.FieldDeleteAt, userstoragepool.FieldCreateAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserStoragePool", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserStoragePool fields.
func (usp *UserStoragePool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstoragepool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			usp.ID = int(value.Int64)
		case userstoragepool.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				usp.DeleteAt = new(time.Time)
				*usp.DeleteAt = value.Time
			}
		case userstoragepool.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				usp.UID = int(value.Int64)
			}
		case userstoragepool.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				usp.RepoID = int(value.Int64)
			}
		case userstoragepool.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				usp.ParentID = int(value.Int64)
			}
		case userstoragepool.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				usp.Filename = value.String
			}
		case userstoragepool.FieldExt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext", values[i])
			} else if value.Valid {
				usp.Ext = value.String
			}
		case userstoragepool.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				usp.CreateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserStoragePool.
// Note that you need to call UserStoragePool.Unwrap() before calling this method if this UserStoragePool
// was returned from a transaction, and the transaction was committed or rolled back.
func (usp *UserStoragePool) Update() *UserStoragePoolUpdateOne {
	return NewUserStoragePoolClient(usp.config).UpdateOne(usp)
}

// Unwrap unwraps the UserStoragePool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usp *UserStoragePool) Unwrap() *UserStoragePool {
	_tx, ok := usp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserStoragePool is not a transactional entity")
	}
	usp.config.driver = _tx.drv
	return usp
}

// String implements the fmt.Stringer.
func (usp *UserStoragePool) String() string {
	var builder strings.Builder
	builder.WriteString("UserStoragePool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usp.ID))
	if v := usp.DeleteAt; v != nil {
		builder.WriteString("delete_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", usp.UID))
	builder.WriteString(", ")
	builder.WriteString("repo_id=")
	builder.WriteString(fmt.Sprintf("%v", usp.RepoID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", usp.ParentID))
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(usp.Filename)
	builder.WriteString(", ")
	builder.WriteString("ext=")
	builder.WriteString(usp.Ext)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(usp.CreateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserStoragePools is a parsable slice of UserStoragePool.
type UserStoragePools []*UserStoragePool
