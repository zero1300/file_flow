// Code generated by ent, DO NOT EDIT.

package ent

import (
	"file_flow/ent/share"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Share is the model entity for the Share schema.
type Share struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户文件id
	UserFileID int `json:"user_file_id,omitempty"`
	// 过期时间
	Expiration int `json:"expiration,omitempty"`
	// 点击量
	ClickNumber int `json:"click_number,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Share) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case share.FieldID, share.FieldUserFileID, share.FieldExpiration, share.FieldClickNumber:
			values[i] = new(sql.NullInt64)
		case share.FieldCreateAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Share", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Share fields.
func (s *Share) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case share.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case share.FieldUserFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_file_id", values[i])
			} else if value.Valid {
				s.UserFileID = int(value.Int64)
			}
		case share.FieldExpiration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				s.Expiration = int(value.Int64)
			}
		case share.FieldClickNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field click_number", values[i])
			} else if value.Valid {
				s.ClickNumber = int(value.Int64)
			}
		case share.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				s.CreateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Share.
// Note that you need to call Share.Unwrap() before calling this method if this Share
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Share) Update() *ShareUpdateOne {
	return NewShareClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Share entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Share) Unwrap() *Share {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Share is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Share) String() string {
	var builder strings.Builder
	builder.WriteString("Share(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_file_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserFileID))
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(fmt.Sprintf("%v", s.Expiration))
	builder.WriteString(", ")
	builder.WriteString("click_number=")
	builder.WriteString(fmt.Sprintf("%v", s.ClickNumber))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(s.CreateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shares is a parsable slice of Share.
type Shares []*Share
