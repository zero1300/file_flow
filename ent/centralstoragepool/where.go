// Code generated by ent, DO NOT EDIT.

package centralstoragepool

import (
	"file_flow/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldID, id))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldDeleteAt, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldFilename, v))
}

// Ext applies equality check predicate on the "ext" field. It's identical to ExtEQ.
func Ext(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldExt, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldSize, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldPath, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldHash, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldCreateAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotNull(FieldDeleteAt))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContainsFold(FieldFilename, v))
}

// ExtEQ applies the EQ predicate on the "ext" field.
func ExtEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldExt, v))
}

// ExtNEQ applies the NEQ predicate on the "ext" field.
func ExtNEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldExt, v))
}

// ExtIn applies the In predicate on the "ext" field.
func ExtIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldExt, vs...))
}

// ExtNotIn applies the NotIn predicate on the "ext" field.
func ExtNotIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldExt, vs...))
}

// ExtGT applies the GT predicate on the "ext" field.
func ExtGT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldExt, v))
}

// ExtGTE applies the GTE predicate on the "ext" field.
func ExtGTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldExt, v))
}

// ExtLT applies the LT predicate on the "ext" field.
func ExtLT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldExt, v))
}

// ExtLTE applies the LTE predicate on the "ext" field.
func ExtLTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldExt, v))
}

// ExtContains applies the Contains predicate on the "ext" field.
func ExtContains(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContains(FieldExt, v))
}

// ExtHasPrefix applies the HasPrefix predicate on the "ext" field.
func ExtHasPrefix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasPrefix(FieldExt, v))
}

// ExtHasSuffix applies the HasSuffix predicate on the "ext" field.
func ExtHasSuffix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasSuffix(FieldExt, v))
}

// ExtEqualFold applies the EqualFold predicate on the "ext" field.
func ExtEqualFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEqualFold(FieldExt, v))
}

// ExtContainsFold applies the ContainsFold predicate on the "ext" field.
func ExtContainsFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContainsFold(FieldExt, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v float64) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldSize, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContainsFold(FieldPath, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldContainsFold(FieldHash, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(sql.FieldLTE(FieldCreateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CentralStoragePool) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CentralStoragePool) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CentralStoragePool) predicate.CentralStoragePool {
	return predicate.CentralStoragePool(func(s *sql.Selector) {
		p(s.Not())
	})
}
