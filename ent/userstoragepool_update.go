// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"file_flow/ent/predicate"
	"file_flow/ent/userstoragepool"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserStoragePoolUpdate is the builder for updating UserStoragePool entities.
type UserStoragePoolUpdate struct {
	config
	hooks    []Hook
	mutation *UserStoragePoolMutation
}

// Where appends a list predicates to the UserStoragePoolUpdate builder.
func (uspu *UserStoragePoolUpdate) Where(ps ...predicate.UserStoragePool) *UserStoragePoolUpdate {
	uspu.mutation.Where(ps...)
	return uspu
}

// SetDeleteAt sets the "delete_at" field.
func (uspu *UserStoragePoolUpdate) SetDeleteAt(t time.Time) *UserStoragePoolUpdate {
	uspu.mutation.SetDeleteAt(t)
	return uspu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uspu *UserStoragePoolUpdate) SetNillableDeleteAt(t *time.Time) *UserStoragePoolUpdate {
	if t != nil {
		uspu.SetDeleteAt(*t)
	}
	return uspu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (uspu *UserStoragePoolUpdate) ClearDeleteAt() *UserStoragePoolUpdate {
	uspu.mutation.ClearDeleteAt()
	return uspu
}

// SetUID sets the "uid" field.
func (uspu *UserStoragePoolUpdate) SetUID(i int) *UserStoragePoolUpdate {
	uspu.mutation.ResetUID()
	uspu.mutation.SetUID(i)
	return uspu
}

// AddUID adds i to the "uid" field.
func (uspu *UserStoragePoolUpdate) AddUID(i int) *UserStoragePoolUpdate {
	uspu.mutation.AddUID(i)
	return uspu
}

// SetRepoID sets the "repo_id" field.
func (uspu *UserStoragePoolUpdate) SetRepoID(i int) *UserStoragePoolUpdate {
	uspu.mutation.ResetRepoID()
	uspu.mutation.SetRepoID(i)
	return uspu
}

// AddRepoID adds i to the "repo_id" field.
func (uspu *UserStoragePoolUpdate) AddRepoID(i int) *UserStoragePoolUpdate {
	uspu.mutation.AddRepoID(i)
	return uspu
}

// SetParentID sets the "parent_id" field.
func (uspu *UserStoragePoolUpdate) SetParentID(i int) *UserStoragePoolUpdate {
	uspu.mutation.ResetParentID()
	uspu.mutation.SetParentID(i)
	return uspu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uspu *UserStoragePoolUpdate) SetNillableParentID(i *int) *UserStoragePoolUpdate {
	if i != nil {
		uspu.SetParentID(*i)
	}
	return uspu
}

// AddParentID adds i to the "parent_id" field.
func (uspu *UserStoragePoolUpdate) AddParentID(i int) *UserStoragePoolUpdate {
	uspu.mutation.AddParentID(i)
	return uspu
}

// SetFilename sets the "filename" field.
func (uspu *UserStoragePoolUpdate) SetFilename(s string) *UserStoragePoolUpdate {
	uspu.mutation.SetFilename(s)
	return uspu
}

// SetExt sets the "ext" field.
func (uspu *UserStoragePoolUpdate) SetExt(s string) *UserStoragePoolUpdate {
	uspu.mutation.SetExt(s)
	return uspu
}

// Mutation returns the UserStoragePoolMutation object of the builder.
func (uspu *UserStoragePoolUpdate) Mutation() *UserStoragePoolMutation {
	return uspu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uspu *UserStoragePoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserStoragePoolMutation](ctx, uspu.sqlSave, uspu.mutation, uspu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uspu *UserStoragePoolUpdate) SaveX(ctx context.Context) int {
	affected, err := uspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uspu *UserStoragePoolUpdate) Exec(ctx context.Context) error {
	_, err := uspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uspu *UserStoragePoolUpdate) ExecX(ctx context.Context) {
	if err := uspu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uspu *UserStoragePoolUpdate) check() error {
	if v, ok := uspu.mutation.Filename(); ok {
		if err := userstoragepool.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.filename": %w`, err)}
		}
	}
	if v, ok := uspu.mutation.Ext(); ok {
		if err := userstoragepool.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.ext": %w`, err)}
		}
	}
	return nil
}

func (uspu *UserStoragePoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uspu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userstoragepool.Table, userstoragepool.Columns, sqlgraph.NewFieldSpec(userstoragepool.FieldID, field.TypeInt))
	if ps := uspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uspu.mutation.DeleteAt(); ok {
		_spec.SetField(userstoragepool.FieldDeleteAt, field.TypeTime, value)
	}
	if uspu.mutation.DeleteAtCleared() {
		_spec.ClearField(userstoragepool.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := uspu.mutation.UID(); ok {
		_spec.SetField(userstoragepool.FieldUID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.AddedUID(); ok {
		_spec.AddField(userstoragepool.FieldUID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.RepoID(); ok {
		_spec.SetField(userstoragepool.FieldRepoID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.AddedRepoID(); ok {
		_spec.AddField(userstoragepool.FieldRepoID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.ParentID(); ok {
		_spec.SetField(userstoragepool.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.AddedParentID(); ok {
		_spec.AddField(userstoragepool.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uspu.mutation.Filename(); ok {
		_spec.SetField(userstoragepool.FieldFilename, field.TypeString, value)
	}
	if value, ok := uspu.mutation.Ext(); ok {
		_spec.SetField(userstoragepool.FieldExt, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstoragepool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uspu.mutation.done = true
	return n, nil
}

// UserStoragePoolUpdateOne is the builder for updating a single UserStoragePool entity.
type UserStoragePoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserStoragePoolMutation
}

// SetDeleteAt sets the "delete_at" field.
func (uspuo *UserStoragePoolUpdateOne) SetDeleteAt(t time.Time) *UserStoragePoolUpdateOne {
	uspuo.mutation.SetDeleteAt(t)
	return uspuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uspuo *UserStoragePoolUpdateOne) SetNillableDeleteAt(t *time.Time) *UserStoragePoolUpdateOne {
	if t != nil {
		uspuo.SetDeleteAt(*t)
	}
	return uspuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (uspuo *UserStoragePoolUpdateOne) ClearDeleteAt() *UserStoragePoolUpdateOne {
	uspuo.mutation.ClearDeleteAt()
	return uspuo
}

// SetUID sets the "uid" field.
func (uspuo *UserStoragePoolUpdateOne) SetUID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.ResetUID()
	uspuo.mutation.SetUID(i)
	return uspuo
}

// AddUID adds i to the "uid" field.
func (uspuo *UserStoragePoolUpdateOne) AddUID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.AddUID(i)
	return uspuo
}

// SetRepoID sets the "repo_id" field.
func (uspuo *UserStoragePoolUpdateOne) SetRepoID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.ResetRepoID()
	uspuo.mutation.SetRepoID(i)
	return uspuo
}

// AddRepoID adds i to the "repo_id" field.
func (uspuo *UserStoragePoolUpdateOne) AddRepoID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.AddRepoID(i)
	return uspuo
}

// SetParentID sets the "parent_id" field.
func (uspuo *UserStoragePoolUpdateOne) SetParentID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.ResetParentID()
	uspuo.mutation.SetParentID(i)
	return uspuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (uspuo *UserStoragePoolUpdateOne) SetNillableParentID(i *int) *UserStoragePoolUpdateOne {
	if i != nil {
		uspuo.SetParentID(*i)
	}
	return uspuo
}

// AddParentID adds i to the "parent_id" field.
func (uspuo *UserStoragePoolUpdateOne) AddParentID(i int) *UserStoragePoolUpdateOne {
	uspuo.mutation.AddParentID(i)
	return uspuo
}

// SetFilename sets the "filename" field.
func (uspuo *UserStoragePoolUpdateOne) SetFilename(s string) *UserStoragePoolUpdateOne {
	uspuo.mutation.SetFilename(s)
	return uspuo
}

// SetExt sets the "ext" field.
func (uspuo *UserStoragePoolUpdateOne) SetExt(s string) *UserStoragePoolUpdateOne {
	uspuo.mutation.SetExt(s)
	return uspuo
}

// Mutation returns the UserStoragePoolMutation object of the builder.
func (uspuo *UserStoragePoolUpdateOne) Mutation() *UserStoragePoolMutation {
	return uspuo.mutation
}

// Where appends a list predicates to the UserStoragePoolUpdate builder.
func (uspuo *UserStoragePoolUpdateOne) Where(ps ...predicate.UserStoragePool) *UserStoragePoolUpdateOne {
	uspuo.mutation.Where(ps...)
	return uspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uspuo *UserStoragePoolUpdateOne) Select(field string, fields ...string) *UserStoragePoolUpdateOne {
	uspuo.fields = append([]string{field}, fields...)
	return uspuo
}

// Save executes the query and returns the updated UserStoragePool entity.
func (uspuo *UserStoragePoolUpdateOne) Save(ctx context.Context) (*UserStoragePool, error) {
	return withHooks[*UserStoragePool, UserStoragePoolMutation](ctx, uspuo.sqlSave, uspuo.mutation, uspuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uspuo *UserStoragePoolUpdateOne) SaveX(ctx context.Context) *UserStoragePool {
	node, err := uspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uspuo *UserStoragePoolUpdateOne) Exec(ctx context.Context) error {
	_, err := uspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uspuo *UserStoragePoolUpdateOne) ExecX(ctx context.Context) {
	if err := uspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uspuo *UserStoragePoolUpdateOne) check() error {
	if v, ok := uspuo.mutation.Filename(); ok {
		if err := userstoragepool.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.filename": %w`, err)}
		}
	}
	if v, ok := uspuo.mutation.Ext(); ok {
		if err := userstoragepool.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "UserStoragePool.ext": %w`, err)}
		}
	}
	return nil
}

func (uspuo *UserStoragePoolUpdateOne) sqlSave(ctx context.Context) (_node *UserStoragePool, err error) {
	if err := uspuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userstoragepool.Table, userstoragepool.Columns, sqlgraph.NewFieldSpec(userstoragepool.FieldID, field.TypeInt))
	id, ok := uspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserStoragePool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userstoragepool.FieldID)
		for _, f := range fields {
			if !userstoragepool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userstoragepool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uspuo.mutation.DeleteAt(); ok {
		_spec.SetField(userstoragepool.FieldDeleteAt, field.TypeTime, value)
	}
	if uspuo.mutation.DeleteAtCleared() {
		_spec.ClearField(userstoragepool.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := uspuo.mutation.UID(); ok {
		_spec.SetField(userstoragepool.FieldUID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.AddedUID(); ok {
		_spec.AddField(userstoragepool.FieldUID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.RepoID(); ok {
		_spec.SetField(userstoragepool.FieldRepoID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.AddedRepoID(); ok {
		_spec.AddField(userstoragepool.FieldRepoID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.ParentID(); ok {
		_spec.SetField(userstoragepool.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.AddedParentID(); ok {
		_spec.AddField(userstoragepool.FieldParentID, field.TypeInt, value)
	}
	if value, ok := uspuo.mutation.Filename(); ok {
		_spec.SetField(userstoragepool.FieldFilename, field.TypeString, value)
	}
	if value, ok := uspuo.mutation.Ext(); ok {
		_spec.SetField(userstoragepool.FieldExt, field.TypeString, value)
	}
	_node = &UserStoragePool{config: uspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstoragepool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uspuo.mutation.done = true
	return _node, nil
}
