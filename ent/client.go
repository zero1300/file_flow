// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"file_flow/ent/migrate"

	"file_flow/ent/centralstoragepool"
	"file_flow/ent/share"
	"file_flow/ent/user"
	"file_flow/ent/userstoragepool"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CentralStoragePool is the client for interacting with the CentralStoragePool builders.
	CentralStoragePool *CentralStoragePoolClient
	// Share is the client for interacting with the Share builders.
	Share *ShareClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserStoragePool is the client for interacting with the UserStoragePool builders.
	UserStoragePool *UserStoragePoolClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CentralStoragePool = NewCentralStoragePoolClient(c.config)
	c.Share = NewShareClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserStoragePool = NewUserStoragePoolClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		CentralStoragePool: NewCentralStoragePoolClient(cfg),
		Share:              NewShareClient(cfg),
		User:               NewUserClient(cfg),
		UserStoragePool:    NewUserStoragePoolClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		CentralStoragePool: NewCentralStoragePoolClient(cfg),
		Share:              NewShareClient(cfg),
		User:               NewUserClient(cfg),
		UserStoragePool:    NewUserStoragePoolClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CentralStoragePool.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CentralStoragePool.Use(hooks...)
	c.Share.Use(hooks...)
	c.User.Use(hooks...)
	c.UserStoragePool.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CentralStoragePool.Intercept(interceptors...)
	c.Share.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserStoragePool.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CentralStoragePoolMutation:
		return c.CentralStoragePool.mutate(ctx, m)
	case *ShareMutation:
		return c.Share.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserStoragePoolMutation:
		return c.UserStoragePool.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CentralStoragePoolClient is a client for the CentralStoragePool schema.
type CentralStoragePoolClient struct {
	config
}

// NewCentralStoragePoolClient returns a client for the CentralStoragePool from the given config.
func NewCentralStoragePoolClient(c config) *CentralStoragePoolClient {
	return &CentralStoragePoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `centralstoragepool.Hooks(f(g(h())))`.
func (c *CentralStoragePoolClient) Use(hooks ...Hook) {
	c.hooks.CentralStoragePool = append(c.hooks.CentralStoragePool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `centralstoragepool.Intercept(f(g(h())))`.
func (c *CentralStoragePoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.CentralStoragePool = append(c.inters.CentralStoragePool, interceptors...)
}

// Create returns a builder for creating a CentralStoragePool entity.
func (c *CentralStoragePoolClient) Create() *CentralStoragePoolCreate {
	mutation := newCentralStoragePoolMutation(c.config, OpCreate)
	return &CentralStoragePoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CentralStoragePool entities.
func (c *CentralStoragePoolClient) CreateBulk(builders ...*CentralStoragePoolCreate) *CentralStoragePoolCreateBulk {
	return &CentralStoragePoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CentralStoragePool.
func (c *CentralStoragePoolClient) Update() *CentralStoragePoolUpdate {
	mutation := newCentralStoragePoolMutation(c.config, OpUpdate)
	return &CentralStoragePoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CentralStoragePoolClient) UpdateOne(csp *CentralStoragePool) *CentralStoragePoolUpdateOne {
	mutation := newCentralStoragePoolMutation(c.config, OpUpdateOne, withCentralStoragePool(csp))
	return &CentralStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CentralStoragePoolClient) UpdateOneID(id int) *CentralStoragePoolUpdateOne {
	mutation := newCentralStoragePoolMutation(c.config, OpUpdateOne, withCentralStoragePoolID(id))
	return &CentralStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CentralStoragePool.
func (c *CentralStoragePoolClient) Delete() *CentralStoragePoolDelete {
	mutation := newCentralStoragePoolMutation(c.config, OpDelete)
	return &CentralStoragePoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CentralStoragePoolClient) DeleteOne(csp *CentralStoragePool) *CentralStoragePoolDeleteOne {
	return c.DeleteOneID(csp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CentralStoragePoolClient) DeleteOneID(id int) *CentralStoragePoolDeleteOne {
	builder := c.Delete().Where(centralstoragepool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CentralStoragePoolDeleteOne{builder}
}

// Query returns a query builder for CentralStoragePool.
func (c *CentralStoragePoolClient) Query() *CentralStoragePoolQuery {
	return &CentralStoragePoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCentralStoragePool},
		inters: c.Interceptors(),
	}
}

// Get returns a CentralStoragePool entity by its id.
func (c *CentralStoragePoolClient) Get(ctx context.Context, id int) (*CentralStoragePool, error) {
	return c.Query().Where(centralstoragepool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CentralStoragePoolClient) GetX(ctx context.Context, id int) *CentralStoragePool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CentralStoragePoolClient) Hooks() []Hook {
	hooks := c.hooks.CentralStoragePool
	return append(hooks[:len(hooks):len(hooks)], centralstoragepool.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CentralStoragePoolClient) Interceptors() []Interceptor {
	inters := c.inters.CentralStoragePool
	return append(inters[:len(inters):len(inters)], centralstoragepool.Interceptors[:]...)
}

func (c *CentralStoragePoolClient) mutate(ctx context.Context, m *CentralStoragePoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CentralStoragePoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CentralStoragePoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CentralStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CentralStoragePoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CentralStoragePool mutation op: %q", m.Op())
	}
}

// ShareClient is a client for the Share schema.
type ShareClient struct {
	config
}

// NewShareClient returns a client for the Share from the given config.
func NewShareClient(c config) *ShareClient {
	return &ShareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `share.Hooks(f(g(h())))`.
func (c *ShareClient) Use(hooks ...Hook) {
	c.hooks.Share = append(c.hooks.Share, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `share.Intercept(f(g(h())))`.
func (c *ShareClient) Intercept(interceptors ...Interceptor) {
	c.inters.Share = append(c.inters.Share, interceptors...)
}

// Create returns a builder for creating a Share entity.
func (c *ShareClient) Create() *ShareCreate {
	mutation := newShareMutation(c.config, OpCreate)
	return &ShareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Share entities.
func (c *ShareClient) CreateBulk(builders ...*ShareCreate) *ShareCreateBulk {
	return &ShareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Share.
func (c *ShareClient) Update() *ShareUpdate {
	mutation := newShareMutation(c.config, OpUpdate)
	return &ShareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShareClient) UpdateOne(s *Share) *ShareUpdateOne {
	mutation := newShareMutation(c.config, OpUpdateOne, withShare(s))
	return &ShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShareClient) UpdateOneID(id int) *ShareUpdateOne {
	mutation := newShareMutation(c.config, OpUpdateOne, withShareID(id))
	return &ShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Share.
func (c *ShareClient) Delete() *ShareDelete {
	mutation := newShareMutation(c.config, OpDelete)
	return &ShareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShareClient) DeleteOne(s *Share) *ShareDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShareClient) DeleteOneID(id int) *ShareDeleteOne {
	builder := c.Delete().Where(share.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShareDeleteOne{builder}
}

// Query returns a query builder for Share.
func (c *ShareClient) Query() *ShareQuery {
	return &ShareQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShare},
		inters: c.Interceptors(),
	}
}

// Get returns a Share entity by its id.
func (c *ShareClient) Get(ctx context.Context, id int) (*Share, error) {
	return c.Query().Where(share.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShareClient) GetX(ctx context.Context, id int) *Share {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShareClient) Hooks() []Hook {
	return c.hooks.Share
}

// Interceptors returns the client interceptors.
func (c *ShareClient) Interceptors() []Interceptor {
	return c.inters.Share
}

func (c *ShareClient) mutate(ctx context.Context, m *ShareMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShareCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShareUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShareDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Share mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserStoragePoolClient is a client for the UserStoragePool schema.
type UserStoragePoolClient struct {
	config
}

// NewUserStoragePoolClient returns a client for the UserStoragePool from the given config.
func NewUserStoragePoolClient(c config) *UserStoragePoolClient {
	return &UserStoragePoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userstoragepool.Hooks(f(g(h())))`.
func (c *UserStoragePoolClient) Use(hooks ...Hook) {
	c.hooks.UserStoragePool = append(c.hooks.UserStoragePool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userstoragepool.Intercept(f(g(h())))`.
func (c *UserStoragePoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserStoragePool = append(c.inters.UserStoragePool, interceptors...)
}

// Create returns a builder for creating a UserStoragePool entity.
func (c *UserStoragePoolClient) Create() *UserStoragePoolCreate {
	mutation := newUserStoragePoolMutation(c.config, OpCreate)
	return &UserStoragePoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserStoragePool entities.
func (c *UserStoragePoolClient) CreateBulk(builders ...*UserStoragePoolCreate) *UserStoragePoolCreateBulk {
	return &UserStoragePoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserStoragePool.
func (c *UserStoragePoolClient) Update() *UserStoragePoolUpdate {
	mutation := newUserStoragePoolMutation(c.config, OpUpdate)
	return &UserStoragePoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserStoragePoolClient) UpdateOne(usp *UserStoragePool) *UserStoragePoolUpdateOne {
	mutation := newUserStoragePoolMutation(c.config, OpUpdateOne, withUserStoragePool(usp))
	return &UserStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserStoragePoolClient) UpdateOneID(id int) *UserStoragePoolUpdateOne {
	mutation := newUserStoragePoolMutation(c.config, OpUpdateOne, withUserStoragePoolID(id))
	return &UserStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserStoragePool.
func (c *UserStoragePoolClient) Delete() *UserStoragePoolDelete {
	mutation := newUserStoragePoolMutation(c.config, OpDelete)
	return &UserStoragePoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserStoragePoolClient) DeleteOne(usp *UserStoragePool) *UserStoragePoolDeleteOne {
	return c.DeleteOneID(usp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserStoragePoolClient) DeleteOneID(id int) *UserStoragePoolDeleteOne {
	builder := c.Delete().Where(userstoragepool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserStoragePoolDeleteOne{builder}
}

// Query returns a query builder for UserStoragePool.
func (c *UserStoragePoolClient) Query() *UserStoragePoolQuery {
	return &UserStoragePoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserStoragePool},
		inters: c.Interceptors(),
	}
}

// Get returns a UserStoragePool entity by its id.
func (c *UserStoragePoolClient) Get(ctx context.Context, id int) (*UserStoragePool, error) {
	return c.Query().Where(userstoragepool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserStoragePoolClient) GetX(ctx context.Context, id int) *UserStoragePool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserStoragePoolClient) Hooks() []Hook {
	hooks := c.hooks.UserStoragePool
	return append(hooks[:len(hooks):len(hooks)], userstoragepool.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserStoragePoolClient) Interceptors() []Interceptor {
	inters := c.inters.UserStoragePool
	return append(inters[:len(inters):len(inters)], userstoragepool.Interceptors[:]...)
}

func (c *UserStoragePoolClient) mutate(ctx context.Context, m *UserStoragePoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserStoragePoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserStoragePoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserStoragePoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserStoragePoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserStoragePool mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CentralStoragePool, Share, User, UserStoragePool []ent.Hook
	}
	inters struct {
		CentralStoragePool, Share, User, UserStoragePool []ent.Interceptor
	}
)
