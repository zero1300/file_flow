// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"file_flow/ent/centralstoragepool"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CentralStoragePoolCreate is the builder for creating a CentralStoragePool entity.
type CentralStoragePoolCreate struct {
	config
	mutation *CentralStoragePoolMutation
	hooks    []Hook
}

// SetDeleteAt sets the "delete_at" field.
func (cspc *CentralStoragePoolCreate) SetDeleteAt(t time.Time) *CentralStoragePoolCreate {
	cspc.mutation.SetDeleteAt(t)
	return cspc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cspc *CentralStoragePoolCreate) SetNillableDeleteAt(t *time.Time) *CentralStoragePoolCreate {
	if t != nil {
		cspc.SetDeleteAt(*t)
	}
	return cspc
}

// SetFilename sets the "filename" field.
func (cspc *CentralStoragePoolCreate) SetFilename(s string) *CentralStoragePoolCreate {
	cspc.mutation.SetFilename(s)
	return cspc
}

// SetExt sets the "ext" field.
func (cspc *CentralStoragePoolCreate) SetExt(s string) *CentralStoragePoolCreate {
	cspc.mutation.SetExt(s)
	return cspc
}

// SetSize sets the "size" field.
func (cspc *CentralStoragePoolCreate) SetSize(f float64) *CentralStoragePoolCreate {
	cspc.mutation.SetSize(f)
	return cspc
}

// SetPath sets the "path" field.
func (cspc *CentralStoragePoolCreate) SetPath(s string) *CentralStoragePoolCreate {
	cspc.mutation.SetPath(s)
	return cspc
}

// SetHash sets the "hash" field.
func (cspc *CentralStoragePoolCreate) SetHash(s string) *CentralStoragePoolCreate {
	cspc.mutation.SetHash(s)
	return cspc
}

// SetCreateAt sets the "create_at" field.
func (cspc *CentralStoragePoolCreate) SetCreateAt(t time.Time) *CentralStoragePoolCreate {
	cspc.mutation.SetCreateAt(t)
	return cspc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cspc *CentralStoragePoolCreate) SetNillableCreateAt(t *time.Time) *CentralStoragePoolCreate {
	if t != nil {
		cspc.SetCreateAt(*t)
	}
	return cspc
}

// Mutation returns the CentralStoragePoolMutation object of the builder.
func (cspc *CentralStoragePoolCreate) Mutation() *CentralStoragePoolMutation {
	return cspc.mutation
}

// Save creates the CentralStoragePool in the database.
func (cspc *CentralStoragePoolCreate) Save(ctx context.Context) (*CentralStoragePool, error) {
	if err := cspc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*CentralStoragePool, CentralStoragePoolMutation](ctx, cspc.sqlSave, cspc.mutation, cspc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cspc *CentralStoragePoolCreate) SaveX(ctx context.Context) *CentralStoragePool {
	v, err := cspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cspc *CentralStoragePoolCreate) Exec(ctx context.Context) error {
	_, err := cspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspc *CentralStoragePoolCreate) ExecX(ctx context.Context) {
	if err := cspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cspc *CentralStoragePoolCreate) defaults() error {
	if _, ok := cspc.mutation.CreateAt(); !ok {
		v := centralstoragepool.DefaultCreateAt
		cspc.mutation.SetCreateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cspc *CentralStoragePoolCreate) check() error {
	if _, ok := cspc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "CentralStoragePool.filename"`)}
	}
	if v, ok := cspc.mutation.Filename(); ok {
		if err := centralstoragepool.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "CentralStoragePool.filename": %w`, err)}
		}
	}
	if _, ok := cspc.mutation.Ext(); !ok {
		return &ValidationError{Name: "ext", err: errors.New(`ent: missing required field "CentralStoragePool.ext"`)}
	}
	if v, ok := cspc.mutation.Ext(); ok {
		if err := centralstoragepool.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "CentralStoragePool.ext": %w`, err)}
		}
	}
	if _, ok := cspc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "CentralStoragePool.size"`)}
	}
	if _, ok := cspc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "CentralStoragePool.path"`)}
	}
	if v, ok := cspc.mutation.Path(); ok {
		if err := centralstoragepool.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "CentralStoragePool.path": %w`, err)}
		}
	}
	if _, ok := cspc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "CentralStoragePool.hash"`)}
	}
	if v, ok := cspc.mutation.Hash(); ok {
		if err := centralstoragepool.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "CentralStoragePool.hash": %w`, err)}
		}
	}
	if _, ok := cspc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "CentralStoragePool.create_at"`)}
	}
	return nil
}

func (cspc *CentralStoragePoolCreate) sqlSave(ctx context.Context) (*CentralStoragePool, error) {
	if err := cspc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cspc.mutation.id = &_node.ID
	cspc.mutation.done = true
	return _node, nil
}

func (cspc *CentralStoragePoolCreate) createSpec() (*CentralStoragePool, *sqlgraph.CreateSpec) {
	var (
		_node = &CentralStoragePool{config: cspc.config}
		_spec = sqlgraph.NewCreateSpec(centralstoragepool.Table, sqlgraph.NewFieldSpec(centralstoragepool.FieldID, field.TypeInt))
	)
	if value, ok := cspc.mutation.DeleteAt(); ok {
		_spec.SetField(centralstoragepool.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = &value
	}
	if value, ok := cspc.mutation.Filename(); ok {
		_spec.SetField(centralstoragepool.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := cspc.mutation.Ext(); ok {
		_spec.SetField(centralstoragepool.FieldExt, field.TypeString, value)
		_node.Ext = value
	}
	if value, ok := cspc.mutation.Size(); ok {
		_spec.SetField(centralstoragepool.FieldSize, field.TypeFloat64, value)
		_node.Size = value
	}
	if value, ok := cspc.mutation.Path(); ok {
		_spec.SetField(centralstoragepool.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := cspc.mutation.Hash(); ok {
		_spec.SetField(centralstoragepool.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := cspc.mutation.CreateAt(); ok {
		_spec.SetField(centralstoragepool.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	return _node, _spec
}

// CentralStoragePoolCreateBulk is the builder for creating many CentralStoragePool entities in bulk.
type CentralStoragePoolCreateBulk struct {
	config
	builders []*CentralStoragePoolCreate
}

// Save creates the CentralStoragePool entities in the database.
func (cspcb *CentralStoragePoolCreateBulk) Save(ctx context.Context) ([]*CentralStoragePool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cspcb.builders))
	nodes := make([]*CentralStoragePool, len(cspcb.builders))
	mutators := make([]Mutator, len(cspcb.builders))
	for i := range cspcb.builders {
		func(i int, root context.Context) {
			builder := cspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CentralStoragePoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cspcb *CentralStoragePoolCreateBulk) SaveX(ctx context.Context) []*CentralStoragePool {
	v, err := cspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cspcb *CentralStoragePoolCreateBulk) Exec(ctx context.Context) error {
	_, err := cspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspcb *CentralStoragePoolCreateBulk) ExecX(ctx context.Context) {
	if err := cspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
