// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"file_flow/ent/share"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShareCreate is the builder for creating a Share entity.
type ShareCreate struct {
	config
	mutation *ShareMutation
	hooks    []Hook
}

// SetUserFileID sets the "user_file_id" field.
func (sc *ShareCreate) SetUserFileID(i int) *ShareCreate {
	sc.mutation.SetUserFileID(i)
	return sc
}

// SetExpiration sets the "expiration" field.
func (sc *ShareCreate) SetExpiration(i int) *ShareCreate {
	sc.mutation.SetExpiration(i)
	return sc
}

// SetClickNumber sets the "click_number" field.
func (sc *ShareCreate) SetClickNumber(i int) *ShareCreate {
	sc.mutation.SetClickNumber(i)
	return sc
}

// SetCreateAt sets the "create_at" field.
func (sc *ShareCreate) SetCreateAt(t time.Time) *ShareCreate {
	sc.mutation.SetCreateAt(t)
	return sc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (sc *ShareCreate) SetNillableCreateAt(t *time.Time) *ShareCreate {
	if t != nil {
		sc.SetCreateAt(*t)
	}
	return sc
}

// Mutation returns the ShareMutation object of the builder.
func (sc *ShareCreate) Mutation() *ShareMutation {
	return sc.mutation
}

// Save creates the Share in the database.
func (sc *ShareCreate) Save(ctx context.Context) (*Share, error) {
	sc.defaults()
	return withHooks[*Share, ShareMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShareCreate) SaveX(ctx context.Context) *Share {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShareCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShareCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShareCreate) defaults() {
	if _, ok := sc.mutation.CreateAt(); !ok {
		v := share.DefaultCreateAt
		sc.mutation.SetCreateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShareCreate) check() error {
	if _, ok := sc.mutation.UserFileID(); !ok {
		return &ValidationError{Name: "user_file_id", err: errors.New(`ent: missing required field "Share.user_file_id"`)}
	}
	if _, ok := sc.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "Share.expiration"`)}
	}
	if _, ok := sc.mutation.ClickNumber(); !ok {
		return &ValidationError{Name: "click_number", err: errors.New(`ent: missing required field "Share.click_number"`)}
	}
	if _, ok := sc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Share.create_at"`)}
	}
	return nil
}

func (sc *ShareCreate) sqlSave(ctx context.Context) (*Share, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShareCreate) createSpec() (*Share, *sqlgraph.CreateSpec) {
	var (
		_node = &Share{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(share.Table, sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.UserFileID(); ok {
		_spec.SetField(share.FieldUserFileID, field.TypeInt, value)
		_node.UserFileID = value
	}
	if value, ok := sc.mutation.Expiration(); ok {
		_spec.SetField(share.FieldExpiration, field.TypeInt, value)
		_node.Expiration = value
	}
	if value, ok := sc.mutation.ClickNumber(); ok {
		_spec.SetField(share.FieldClickNumber, field.TypeInt, value)
		_node.ClickNumber = value
	}
	if value, ok := sc.mutation.CreateAt(); ok {
		_spec.SetField(share.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	return _node, _spec
}

// ShareCreateBulk is the builder for creating many Share entities in bulk.
type ShareCreateBulk struct {
	config
	builders []*ShareCreate
}

// Save creates the Share entities in the database.
func (scb *ShareCreateBulk) Save(ctx context.Context) ([]*Share, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Share, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShareCreateBulk) SaveX(ctx context.Context) []*Share {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShareCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShareCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
